// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          Cart?
  wishlist      WishlistItem[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  price       Float
  images      String[]
  thumbnails  String[]
  rating      Float        @default(0)
  reviewCount Int          @default(0)
  discount    Float?
  isNew       Boolean      @default(false)
  inventory   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  brandId     String
  brand       Brand        @relation(fields: [brandId], references: [id])
  sizes       Size[]
  colors      Color[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlist    WishlistItem[]
}

model Size {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(cuid())
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, value])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String      @id @default(cuid())
  orderNumber      String      @unique
  userId           String
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status           OrderStatus @default(PENDING)
  total            Float
  shippingFee      Float       @default(0)
  items            OrderItem[]
  shippingAddressId String?
  shippingAddress  Address?    @relation(fields: [shippingAddressId], references: [id])
  paymentMethod    String?
  paymentIntentId  String?
  notes            String?     @db.Text
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String  @id @default(cuid())
  street    String
  city      String
  state     String?
  zipCode   String
  country   String
  isDefault Boolean @default(false)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

